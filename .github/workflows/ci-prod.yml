name: Deploy to ec2 instance prod

on:
  push:
    branches: [ prod ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  APP_DIR: ToDo_Web_app4_users
  ECR_REGISTRY: 734075410113.dkr.ecr.eu-central-1.amazonaws.com

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          #role-to-assume: arn:aws:iam::734075410113:role/ec2_role-gorilla-prod

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variable
        run: echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Check current working directory
        run: |
          pwd
          ls

      # - name: Create .env file from secrets
      #   run: |
      #     echo SECRET=${{ secrets.SECRET }} >> .env
      #     echo JWT_RESET_SECRET_KEY=${{ secrets.JWT_RESET_SECRET_KEY }} >> .env
      #     echo ALGORITHM=${{ secrets.ALGORITHM }} >> .env
      #     echo SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }} >> .env
      #     echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> .env
      #     echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> .env
      #     # Add more lines as necessary for each secret

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          # IMAGE_TAG: ${{ github.sha }} --build-arg env_file=.env
        run: |
          docker build  -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./application
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


      - name: SSH into instance and update docker-compose file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.INSTANCE_HOST }}
          username: ${{ secrets.INSTANCE_USER }}
          key: ${{ secrets.INSTANCE_KEY }}
          script_stop: true # stop script if any error occurs 
          # script_timeout : 60 # timeout after 60 seconds 
          script : |

            if [ ! -d "ToDo_Web_app4_users" ]; then 
                sudo -u ubuntu git clone -b prod https://github.com/midi-chlorians8/ToDo_Web_app4_users.git || echo "git clone failed" 
            fi

            cd /home/ubuntu/ToDo_Web_app4_users/
            ls -la

            git diff-index --quiet HEAD -- || CHANGES_PRESENT="true" || CHANGES_PRESENT="false"

            if [ "$CHANGES_PRESENT" = "true" ]; then 
                git stash 
                git checkout prod
                git pull 
                if git stash list | grep -q "stash@{0}"; then
                    git stash apply 
                fi
            fi 

            perl -i -pe 'if (/^  web:/../^[^ ]/) { s/(image:.*):.*/$1:${{ env.IMAGE_TAG }}/ if /^    image:/ }' docker-compose.yaml
            aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }} 
            
            cd application
            rm -f .env
            echo SECRET=${{ secrets.SECRET }} >> .env
            echo JWT_RESET_SECRET_KEY=${{ secrets.JWT_RESET_SECRET_KEY }} >> .env
            echo ALGORITHM=${{ secrets.ALGORITHM }} >> .env
            echo SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }} >> .env
            echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> .env
            echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> .env           
            cd ..

            docker-compose up -d db
            docker-compose up -d web

      # Добавьте этот шаг для проверки работоспособности приложения после развертывания
      - name: Run smoke tests
        run: |
          sleep 8
          curl -f -X GET "https://todo.kolotech.space/healthcheck" -H "accept: application/json"